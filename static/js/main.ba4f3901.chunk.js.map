{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","data","setData","_useState5","_useState6","sortConfig","setSortConfig","dollarUS","Intl","NumberFormat","style","currency","handleSort","column","direction","sortedData","React","useMemo","sortableData","toConsumableArray","map","item","expectancy","mprofit","mpodds","mloss","mlodds","sort","a","b","react_default","createElement","Container","fluid","Row","className","Form","onSubmit","e","preventDefault","parsedData","JSON","parse","error","console","value","onChange","target","Button","type","variant","size","length","Table","responsive","onClick","index","key","symbol","days","format","Math","round","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"qPA4IeA,SAlIH,WAAM,IAAAC,EACQC,mBAAS,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA7BK,EAAIH,EAAA,GAAEI,EAAOJ,EAAA,GAAAK,EACIN,mBAAS,IAAGO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAA7BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAAAG,EACgBV,mBAAS,IAAGW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BG,EAAWC,KAAKC,aAAa,QAAS,CAC1CC,MAAO,WACPC,SAAU,QAeNC,EAAa,SAACC,GAClB,IAAIC,EAAY,YACZT,EAAWQ,SAAWA,GAAmC,cAAzBR,EAAWS,YAC7CA,EAAY,cAEdR,EAAc,CAAEO,SAAQC,eAGpBC,EAAaC,IAAMC,QAAQ,WAC/B,IAAIC,EAAYvB,OAAAwB,EAAA,EAAAxB,CAAOM,GAcvB,OAbAiB,EAAeA,EAAaE,IAAI,SAACC,GAE/B,OADAA,EAAKC,WAAaD,EAAKE,QAAUF,EAAKG,OAASH,EAAKI,MAAQJ,EAAKK,OAC1DL,IAELhB,EAAWQ,QACbK,EAAaS,KAAK,SAACC,EAAGC,GACpB,MAA6B,cAAzBxB,EAAWS,UACNc,EAAEvB,EAAWQ,QAAUgB,EAAExB,EAAWQ,QAAU,GAAK,EAEnDe,EAAEvB,EAAWQ,QAAUgB,EAAExB,EAAWQ,QAAU,GAAK,IAIzDK,GACN,CAACjB,EAAMI,IAEV,OACEyB,EAAAF,EAAAG,cAACC,EAAA,EAAS,CAACC,OAAK,GACfH,EAAAF,EAAAG,cAACG,EAAA,EAAG,CAACC,UAAU,yBACdL,EAAAF,EAAAG,cAACK,EAAA,EAAI,CAACC,SAzCW,SAACC,GACpBA,EAAEC,iBACF,IAAIC,EAAa,GACjB,IACEA,EAAaC,KAAKC,MAAM7C,GACxB,MAAO8C,GACPC,QAAQD,MAAM,sBAAuBA,GAGvCzC,EAAQsC,KAiCJV,EAAAF,EAAAG,cAAA,YAAUc,MAAOhD,EAAMiD,SAAU,SAACR,GAAC,OAAKxC,EAAQwC,EAAES,OAAOF,UACzDf,EAAAF,EAAAG,cAACiB,EAAA,EAAM,CAACC,KAAK,SAASC,QAAQ,oBAAoBC,KAAK,QAAQhB,UAAU,QAAO,WAEjFlC,EAAKmD,OAAS,GACbtB,EAAAF,EAAAG,cAACsB,EAAA,EAAK,CAACC,YAAU,EAACH,KAAK,KAAKhB,UAAU,6CACpCL,EAAAF,EAAAG,cAAA,aACED,EAAAF,EAAAG,cAAA,UACAD,EAAAF,EAAAG,cAAA,MAAIwB,QAAS,kBAAM3C,EAAW,YAAW,SAEd,WAAtBP,EAAWQ,OACe,cAAzBR,EAAWS,UAA4B,iBAAS,gBAC9C,MAENgB,EAAAF,EAAAG,cAAA,MAAIwB,QAAS,kBAAM3C,EAAW,UAAS,UAEd,SAAtBP,EAAWQ,OACe,cAAzBR,EAAWS,UAA4B,iBAAS,gBAC9C,MAENgB,EAAAF,EAAAG,cAAA,MAAIwB,QAAS,kBAAM3C,EAAW,UAAS,MAEd,SAAtBP,EAAWQ,OACe,cAAzBR,EAAWS,UAA4B,iBAAS,gBAC9C,MAENgB,EAAAF,EAAAG,cAAA,MAAIwB,QAAS,kBAAM3C,EAAW,aAAY,aAEjB,YAAtBP,EAAWQ,OACe,cAAzBR,EAAWS,UAA4B,eAAO,eAC5C,MAEJgB,EAAAF,EAAAG,cAAA,MAAIwB,QAAS,kBAAM3C,EAAW,WAAU,WAEjB,UAAtBP,EAAWQ,OACe,cAAzBR,EAAWS,UAA4B,eAAO,eAC5C,MAENgB,EAAAF,EAAAG,cAAA,MAAIwB,QAAS,kBAAM3C,EAAW,YAAW,oBAEhB,WAAtBP,EAAWQ,OACe,cAAzBR,EAAWS,UAA4B,eAAO,eAC5C,MAENgB,EAAAF,EAAAG,cAAA,MAAIwB,QAAS,kBAAM3C,EAAW,YAAW,kBAEhB,WAAtBP,EAAWQ,OACe,cAAzBR,EAAWS,UAA4B,eAAO,eAC5C,MAENgB,EAAAF,EAAAG,cAAA,MAAIwB,QAAS,kBAAM3C,EAAW,gBAAe,kCAEpB,eAAtBP,EAAWQ,OACe,cAAzBR,EAAWS,UAA4B,eAAO,eAC5C,QAIVgB,EAAAF,EAAAG,cAAA,aACGhB,EAAWK,IAAI,SAACC,EAAMmC,GAAK,OAC1B1B,EAAAF,EAAAG,cAAA,MAAI0B,IAAKD,GACP1B,EAAAF,EAAAG,cAAA,UAAKV,EAAKqC,QACV5B,EAAAF,EAAAG,cAAA,UAAKV,EAAKxB,MACViC,EAAAF,EAAAG,cAAA,UAAKV,EAAKsC,MACV7B,EAAAF,EAAAG,cAAA,UAAKxB,EAASqD,OAAOC,KAAKC,MAAMzC,EAAKE,WACrCO,EAAAF,EAAAG,cAAA,UAAKxB,EAASqD,OAAOC,KAAKC,MAAMzC,EAAKI,SACrCK,EAAAF,EAAAG,cAAA,UAAK8B,KAAKC,MAAkB,IAAZzC,EAAKG,QAAY,KACjCM,EAAAF,EAAAG,cAAA,UAAK8B,KAAKC,MAAkB,IAAZzC,EAAKK,QAAY,KACjCI,EAAAF,EAAAG,cAAA,UAAKxB,EAASqD,OAAOC,KAAKC,MAAMzC,EAAKC,6BC5HxCyC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHrC,EAAAF,EAAAG,cAACD,EAAAF,EAAMwC,WAAU,KACftC,EAAAF,EAAAG,cAACsC,EAAG","file":"static/js/main.ba4f3901.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Form,\r\n  Button,\r\n  Table\r\n} from 'react-bootstrap';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [data, setData] = useState([]);\r\n  const [sortConfig, setSortConfig] = useState({});\r\n\r\n  const dollarUS = Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n  });\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let parsedData = [];\r\n    try {\r\n      parsedData = JSON.parse(text);\r\n    } catch (error) {\r\n      console.error(\"Error parsing JSON:\", error);\r\n    }\r\n\r\n    setData(parsedData);\r\n  };\r\n\r\n  const handleSort = (column) => {\r\n    let direction = 'ascending';\r\n    if (sortConfig.column === column && sortConfig.direction === 'ascending') {\r\n      direction = 'descending';\r\n    }\r\n    setSortConfig({ column, direction });\r\n  };\r\n\r\n  const sortedData = React.useMemo(() => {\r\n    let sortableData = [...data];\r\n    sortableData = sortableData.map((item) => {\r\n      item.expectancy = item.mprofit * item.mpodds - item.mloss * item.mlodds;\r\n      return item;\r\n    });\r\n    if (sortConfig.column) {\r\n      sortableData.sort((a, b) => {\r\n        if (sortConfig.direction === 'ascending') {\r\n          return a[sortConfig.column] > b[sortConfig.column] ? 1 : -1;\r\n        } else {\r\n          return a[sortConfig.column] < b[sortConfig.column] ? 1 : -1;\r\n        }\r\n      });\r\n    }\r\n    return sortableData;\r\n  }, [data, sortConfig]);\r\n  \r\n  return (\r\n    <Container fluid>\r\n     <Row className=\"mx-auto mt-3 mb-2 p-1\">\r\n      <Form onSubmit={handleSubmit}>\r\n        <textarea value={text} onChange={(e) => setText(e.target.value)} />\r\n        <Button type=\"submit\" variant=\"outline-secondary\" size=\"small\" className=\"mb-2\">Submit</Button>\r\n      </Form>\r\n      {data.length > 0 && (\r\n        <Table responsive size=\"sm\" className=\"sticky text-light border border-secondary\">\r\n          <thead>\r\n            <tr>\r\n            <th onClick={() => handleSort('symbol')}>\r\n                Symbol\r\n                {sortConfig.column === 'symbol' ? (\r\n                  sortConfig.direction === 'ascending' ? '  ðŸ”¼' : ' ðŸ”½'\r\n                ) : null}\r\n              </th>\r\n              <th onClick={() => handleSort('text')}>\r\n                Strikes\r\n                {sortConfig.column === 'text' ? (\r\n                  sortConfig.direction === 'ascending' ? '  ðŸ”¼' : ' ðŸ”½'\r\n                ) : null}\r\n              </th>\r\n              <th onClick={() => handleSort('days')}>\r\n                DTE\r\n                {sortConfig.column === 'days' ? (\r\n                  sortConfig.direction === 'ascending' ? '  ðŸ”¼' : ' ðŸ”½'\r\n                ) : null}\r\n              </th>\r\n              <th onClick={() => handleSort('mprofit')}>\r\n                Max Profit\r\n                {sortConfig.column === 'mprofit' ? (\r\n                  sortConfig.direction === 'ascending' ? 'ðŸ”¼' : 'ðŸ”½'\r\n                ) : null}\r\n                </th>\r\n                <th onClick={() => handleSort('mloss')}>\r\n                Max Loss\r\n                {sortConfig.column === 'mloss' ? (\r\n                  sortConfig.direction === 'ascending' ? 'ðŸ”¼' : 'ðŸ”½'\r\n                ) : null}\r\n              </th>\r\n              <th onClick={() => handleSort('mpodds')}>\r\n                Chance Max Profit\r\n                {sortConfig.column === 'mpodds' ? (\r\n                  sortConfig.direction === 'ascending' ? 'ðŸ”¼' : 'ðŸ”½'\r\n                ) : null}\r\n              </th>\r\n              <th onClick={() => handleSort('mlodds')}>\r\n                Chance Max Loss\r\n                {sortConfig.column === 'mlodds' ? (\r\n                  sortConfig.direction === 'ascending' ? 'ðŸ”¼' : 'ðŸ”½'\r\n                ) : null}\r\n              </th>\r\n              <th onClick={() => handleSort('expectancy')}>\r\n                Probable Profit Per Trade (P3T)\r\n                {sortConfig.column === 'expectancy' ? (\r\n                  sortConfig.direction === 'ascending' ? 'ðŸ”¼' : 'ðŸ”½'\r\n                ) : null}\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sortedData.map((item, index) => (\r\n              <tr key={index}>\r\n                <td>{item.symbol}</td>\r\n                <td>{item.text}</td>\r\n                <td>{item.days}</td>\r\n                <td>{dollarUS.format(Math.round(item.mprofit))}</td>\r\n                <th>{dollarUS.format(Math.round(item.mloss))}</th>\r\n                <td>{Math.round(item.mpodds*100)}%</td>\r\n                <td>{Math.round(item.mlodds*100)}%</td>\r\n                <td>{dollarUS.format(Math.round(item.expectancy))}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n      </Row>\r\n      </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport App from './App'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n\r\n"],"sourceRoot":""}