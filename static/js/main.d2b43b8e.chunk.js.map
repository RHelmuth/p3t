{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","data","setData","_useState5","_useState6","sortConfig","setSortConfig","dollarUS","Intl","NumberFormat","style","currency","handleSort","column","direction","sortedData","React","useMemo","sortableData","toConsumableArray","sort","a","b","react_default","createElement","Container","fluid","Row","className","Form","onSubmit","e","preventDefault","parsedData","JSON","parse","error","console","value","onChange","target","Button","type","variant","size","length","Table","responsive","onClick","map","item","index","key","symbol","days","format","Math","round","mprofit","mloss","mpodds","mlodds","Number","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.d2b43b8e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Form,\n  Button,\n  Table\n} from 'react-bootstrap';\nimport './App.css';\n\nconst App = () => {\n  const [text, setText] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [sortConfig, setSortConfig] = useState({});\n\n  const dollarUS = Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let parsedData = [];\n    try {\n      parsedData = JSON.parse(text);\n    } catch (error) {\n      console.error(\"Error parsing JSON:\", error);\n    }\n\n    setData(parsedData);\n  };\n\n  const handleSort = (column) => {\n    let direction = 'ascending';\n    if (sortConfig.column === column && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n    setSortConfig({ column, direction });\n  };\n\n  const sortedData = React.useMemo(() => {\n    let sortableData = [...data];\n    if (sortConfig.column) {\n      sortableData.sort((a, b) => {\n        if (sortConfig.direction === 'ascending') {\n          return a[sortConfig.column] > b[sortConfig.column] ? 1 : -1;\n        } else {\n          return a[sortConfig.column] < b[sortConfig.column] ? 1 : -1;\n        }\n      });\n    }\n    return sortableData;\n  }, [data, sortConfig]);\n  \n  return (\n    <Container fluid>\n     <Row className=\"mx-auto mt-3 mb-2 p-1\">\n      <Form onSubmit={handleSubmit}>\n        <textarea value={text} onChange={(e) => setText(e.target.value)} />\n        <Button type=\"submit\" variant=\"outline-secondary\" size=\"small\" className=\"mb-2\">Submit</Button>\n      </Form>\n      {data.length > 0 && (\n        <Table responsive size=\"sm\" className=\"sticky text-light border border-secondary\">\n          <thead>\n            <tr>\n            <th onClick={() => handleSort('symbol')}>\n                Symbol\n                {sortConfig.column === 'symbol' ? (\n                  sortConfig.direction === 'ascending' ? '  ðŸ”¼' : ' ðŸ”½'\n                ) : null}\n              </th>\n              <th onClick={() => handleSort('text')}>\n                Strikes\n                {sortConfig.column === 'text' ? (\n                  sortConfig.direction === 'ascending' ? '  ðŸ”¼' : ' ðŸ”½'\n                ) : null}\n              </th>\n              <th onClick={() => handleSort('days')}>\n                DTE\n                {sortConfig.column === 'days' ? (\n                  sortConfig.direction === 'ascending' ? '  ðŸ”¼' : ' ðŸ”½'\n                ) : null}\n              </th>\n              <th onClick={() => handleSort('mprofit')}>\n                Max Profit\n                {sortConfig.column === 'mprofit' ? (\n                  sortConfig.direction === 'ascending' ? 'ðŸ”¼' : 'ðŸ”½'\n                ) : null}\n                </th>\n                <th onClick={() => handleSort('mloss')}>\n                Max Loss\n                {sortConfig.column === 'mloss' ? (\n                  sortConfig.direction === 'ascending' ? 'ðŸ”¼' : 'ðŸ”½'\n                ) : null}\n              </th>\n              <th onClick={() => handleSort('mpodds')}>\n                Chance Max Profit\n                {sortConfig.column === 'mpodds' ? (\n                  sortConfig.direction === 'ascending' ? 'ðŸ”¼' : 'ðŸ”½'\n                ) : null}\n              </th>\n              <th onClick={() => handleSort('mlodds')}>\n                Chance Max Loss\n                {sortConfig.column === 'mlodds' ? (\n                  sortConfig.direction === 'ascending' ? 'ðŸ”¼' : 'ðŸ”½'\n                ) : null}\n              </th>\n              <th onClick={() => handleSort('expectancy')}>\n                Probable Profit Per Trade (P3T)\n                {sortConfig.column === 'expectancy' ? (\n                  sortConfig.direction === 'ascending' ? 'ðŸ”¼' : 'ðŸ”½'\n                ) : null}\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {sortedData.map((item, index) => (\n              <tr key={index}>\n                <td>{item.symbol}</td>\n                <td>{item.text}</td>\n                <td>{item.days}</td>\n                <td>{dollarUS.format(Math.round(item.mprofit))}</td>\n                <th>{dollarUS.format(Math.round(item.mloss))}</th>\n                <td>{Math.round(item.mpodds*100)}%</td>\n                <td>{Math.round(item.mlodds*100)}%</td>\n                <td>{dollarUS.format(Math.round(Number((item.mprofit * item.mpodds) - (item.mloss * item.mlodds))))}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n      </Row>\n      </Container>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\n"],"sourceRoot":""}